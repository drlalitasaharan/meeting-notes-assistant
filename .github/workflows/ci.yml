name: CI
on:
  push:
  pull_request:
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
permissions: read-all
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Docker info
        run: |
          docker --version
          docker compose version
      - name: Build images
        run: docker compose build
  smoke:
    runs-on: ubuntu-latest
    needs: build
    env:
      DATABASE_URL: sqlite:////app/backend/dev.db
    steps:
      - uses: actions/checkout@v4
      - name: Install test tools (jq, ImageMagick, curl)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq imagemagick curl
      - name: Compose config (debug)
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml config
      - name: Boot stack
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml up -d --build
      - name: Alembic status (debug)
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml exec -T backend sh -lc '
            alembic -c backend/alembic.ini current || python -m alembic -c backend/alembic.ini current || true
          '
      - name: Wait for API (healthz)
        run: |
          echo "Waiting for backend container..."
          for i in {1..60}; do
            if docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml exec -T backend python -c "import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://127.0.0.1:8000/healthz', timeout=3).getcode()==200 else 1)"; then # /healthz
              echo "✅ API is up!"
              exit 0
            fi
            echo "Waiting... ($i)"
            sleep 2
          done
          echo "❌ API failed to start in time"
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml logs backend
          exit 1
      - name: Smoke – process meeting 1
        run: |
          set -euo pipefail

          # sample assets
          mkdir -p storage/1
          echo "Test OCR slide" > storage/1/slide.txt
          convert -size 600x200 xc:white -pointsize 32 -gravity center -annotate 0 "Hello OCR" storage/1/slide.png || true

          # submit job (returns job_id)
          JOB=$(docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml exec -T backend \
            python -c "import json,urllib.request,sys; req=urllib.request.Request('http://127.0.0.1:8000/v1/meetings/1/process', method='POST'); print(json.load(urllib.request.urlopen(req,timeout=10))['job_id'], end='')" )
          echo "JOB=$JOB"

          # poll status
          for i in {1..60}; do
            S=$(docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml exec -e JOB="$JOB" -T backend \
              python -c "import os,json,urllib.request; job=os.environ.get('JOB'); print(json.load(urllib.request.urlopen(f'http://127.0.0.1:8000/v1/jobs/{job}',timeout=10))['status'], end='')" )
            echo "status=$S"
            [ "$S" = "finished" ] && break
            sleep 2
          done

          FINAL=$(docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml exec -e JOB="$JOB" -T backend \
            python -c "import os,json,urllib.request; job=os.environ.get('JOB'); print(json.load(urllib.request.urlopen(f'http://127.0.0.1:8000/v1/jobs/{job}',timeout=10))['status'], end='')" )
          if [ "$FINAL" != "finished" ]; then
            echo "Job did not finish in time (status=$FINAL)"
            exit 1
          fi

          # fetch notes JSON
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml exec -T backend \
            python -c "import sys,urllib.request; print(urllib.request.urlopen('http://127.0.0.1:8000/v1/meetings/1/notes',timeout=10).read().decode(), end='')" | jq .
      - name: Archive docker logs (on failure)
        if: failure()
        run: |
          mkdir -p artifacts
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml ps
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml logs --no-color > artifacts/compose.log
      - name: Upload logs artifact (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: docker-logs
          path: artifacts/compose.log
      - name: Show container logs (always)
        if: always()
        run: |
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml ps
          docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml logs --no-color --timestamps || true
      - name: Tear down (always)
        if: always()
        run: docker compose -f docker-compose.yml -f docker-compose.ci.yml -f docker-compose.override.ci.yml -f docker-compose.alembic.ci.yml down -v
