services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    environment:
      ENV: ${ENV:-dev}
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg2://postgres:postgres@db:5432/meetings}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      STORAGE_BACKEND: ${STORAGE_BACKEND:-s3}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-miniouser}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-miniopass}
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_SECURE: ${S3_SECURE:-false}
      OBJECT_BUCKET: ${OBJECT_BUCKET:-mna-artifacts}
      PYTHONPATH: /app/backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 5s
      timeout: 3s
      retries: 50

  worker:
    build:
      context: .
      dockerfile: worker/Dockerfile
    environment:
      ENV: ${ENV:-dev}
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg2://postgres:postgres@db:5432/meetings}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      STORAGE_BACKEND: ${STORAGE_BACKEND:-s3}
      S3_ENDPOINT: ${S3_ENDPOINT:-http://minio:9000}
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-miniouser}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-miniopass}
      S3_REGION: ${S3_REGION:-us-east-1}
      S3_SECURE: ${S3_SECURE:-false}
      OBJECT_BUCKET: ${OBJECT_BUCKET:-mna-artifacts}
      PYTHONPATH: /app/backend
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
  db:
    extends:
      file: docker-compose.yml
      service: db
  redis:
    extends:
      file: docker-compose.yml
      service: redis
  minio:
    extends:
      file: docker-compose.yml
      service: minio
