from __future__ import annotations
import os, sys
from logging.config import fileConfig
from alembic import context
from sqlalchemy import engine_from_config, pool

# make 'app' importable (backend/ is parent of alembic/)
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# models metadata
from app.models import Base  # exposes Base.metadata

# Alembic config & logging
config = context.config
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

target_metadata = Base.metadata

def get_db_url() -> str:
    # Prefer pydantic settings if present; else fall back to env var or sqlite dev.db
    try:
        from app.core.settings import settings
        return settings.DATABASE_URL
    except Exception:
        return os.getenv("DATABASE_URL", "sqlite:///./dev.db")

def run_migrations_offline() -> None:
    url = get_db_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        compare_type=True,
    )
    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    cfg = config.get_section(config.config_ini_section) or {}
    cfg["sqlalchemy.url"] = get_db_url()
    connectable = engine_from_config(
        cfg,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )
    with connectable.connect() as connection:
        context.configure(connection=connection, target_metadata=target_metadata, compare_type=True)
        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
